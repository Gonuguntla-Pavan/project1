{"version":3,"sources":["boy.svg","Resume.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Resume","props","info","Object","values","location","index","value","person","data","profiles","console","log","className","src","icon","alt","basics","name","email","mobile","education","map","i","j","key","degree","percentage","institute","skills","x","y","type","k","l","style","display","Profile","exact","path","component","href","to","pathname","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iC,0LCgD5BC,EA5CJ,SAACC,GACR,IAAIC,EAAKC,OAAOC,OAAOH,EAAMI,SAASC,MAAMC,OACxCC,EAAOC,EAAKC,SAASR,GAEzB,OADAS,QAAQC,IAAIJ,GAER,yBAAKK,UAAU,UACX,yBAAKA,UAAU,SACf,yBAAKC,IAAKC,IAAMC,IAAI,YAChB,4BAAKR,EAAOS,OAAOC,MACnB,4BAAKV,EAAOS,OAAOE,OACnB,4BAAKX,EAAOS,OAAOG,SAGvB,yBAAKP,UAAU,UACX,yDACA,6BACCL,EAAOa,UAAUC,KAAI,SAACC,EAAEC,GAAH,OAClB,yBAAKC,IAAKD,GACN,gCAAMD,EAAEG,OAAR,KACA,4BACI,4BAAKH,EAAEI,YACP,4BAAKJ,EAAEK,gBAInB,wCACA,6BACGpB,EAAOqB,OAAOP,KAAI,SAACQ,EAAEC,GAAH,OACjB,yBAAKN,IAAKM,GACN,4BAAKD,EAAEE,MACNF,EAAE1B,OAAOkB,KAAI,SAACW,EAAEC,GAAH,OACV,yBAAKT,IAAKS,EAAGC,MAAO,CAACC,QAAQ,WACzB,0BAAMvB,UAAU,SAASoB,c,cCP1CI,EAtBH,WACR,IAAM3B,EAASD,EAAKC,SACpB,OACI,yBAAKG,UAAU,UACX,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,UAAUC,UAAWxC,KAEtCU,EAASY,KAAI,SAACC,EAAEC,GAAH,OACV,yBAAKX,UAAU,QAAQY,IAAKD,GACxB,yBAAKV,IAAKC,IAAKC,IAAI,YACnB,gCAAK,6BAAUO,EAAEN,OAAOC,MACxB,uBAAGuB,KAAM,UAAUlB,EAAEN,OAAOE,MAAMN,UAAU,QAAQU,EAAEN,OAAOE,OAAU,6BAEvE,uBAAGsB,KAAM,OAAOlB,EAAEN,OAAOG,OAAQP,UAAU,QAAQU,EAAEN,OAAOG,QALhE,IAK4E,6BACxE,kBAAC,IAAD,CAAMsB,GAAI,CAACC,SAAS,UAAUrC,MAAM,CAACC,MAAM,CAACiB,OAAKX,UAAU,OAA3D,uBCRL+B,G,MARP,WACN,OACE,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAON,OAAK,EAACC,KAAK,IAAIC,UAAWH,IACjC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWxC,OCG1B6C,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.626ecaff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boy.efe01b90.svg\";","import React from 'react';\r\nimport data from './data.json';\r\nimport icon from './boy.svg';\r\n\r\nlet Resume=(props)=>{\r\n    let info=Object.values(props.location.index.value);\r\n    let person=data.profiles[info]\r\n    console.log(person);\r\n    return(\r\n        <div className=\"parent\">\r\n            <div className=\"child\">\r\n            <img src={icon} alt=\"profile\"/>\r\n                <h3>{person.basics.name}</h3>\r\n                <h3>{person.basics.email}</h3>\r\n                <h3>{person.basics.mobile}</h3>\r\n                \r\n            </div>\r\n            <div className=\"child2\">\r\n                <h3> Education Qualifications</h3>\r\n                <hr></hr>\r\n                {person.education.map((i,j)=>(\r\n                    <div key={j}>\r\n                        <h4> {i.degree} </h4>\r\n                        <ul>\r\n                            <li>{i.percentage}</li>\r\n                            <li>{i.institute}</li>\r\n                        </ul>\r\n                        </div>\r\n                ))}\r\n                <h3> Skills </h3>\r\n                <hr></hr>\r\n                  {person.skills.map((x,y)=>(\r\n                    <div key={y}>\r\n                        <h4>{x.type}</h4>\r\n                        {x.values.map((k,l)=>(\r\n                            <div key={l} style={{display:\"inline\"}}>\r\n                                <span className=\"skill\">{k}</span>\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n                ))}\r\n\r\n               \r\n            </div>\r\n        \r\n        </div>\r\n    )\r\n}\r\nexport default Resume;\r\n","import React from 'react';\r\nimport data from './data.json';\r\nimport icon from './boy.svg';\r\nimport Resume from'./Resume';\r\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\r\n\r\n\r\nlet Profile=()=>{\r\n    const profiles=data.profiles;\r\n    return(\r\n        <div className=\"parent\">\r\n            <BrowserRouter>\r\n            <Route exact path=\"/resume\" component={Resume}></Route>\r\n            </BrowserRouter>\r\n            {profiles.map((i,j)=>(\r\n                <div className=\"child\" key={j}>\r\n                    <img src={icon}alt=\"profile\" />\r\n                    <h2> <hr></hr>{i.basics.name}</h2>\r\n                    <a href={\"mailto:\"+i.basics.email}className=\"link\">{i.basics.email}</a><br></br>\r\n\r\n                    <a href={\"tel:\"+i.basics.mobile} className=\"link\">{i.basics.mobile}</a> <hr></hr>\r\n                    <Link to={{pathname:\"/resume\",index:{value:{j}}}}className=\"btn\"> Veiw Profile</Link>\r\n\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\nimport Profile from './Profile';\nimport './App.css';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport Resume  from './Resume';\nlet App=()=>{\n  return (\n    <BrowserRouter>\n       <Route exact path=\"/\" component={Profile}/>\n       <Route exact path=\"/resume\" component={Resume}/>\n    </BrowserRouter>\n  )\n}\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}